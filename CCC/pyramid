#include <bits/stdc++.h>
using namespace std;

unordered_map <string, int> m;
queue <int> q;
int n, cnt, ans = -1, dis[101];
bool vis[101];
string s, t, start;
vector <int> adj[101];

int dfs(int cur){
    int ret = 0;
    
    for (int x : cur[adj]){
        if (vis[x] == 1){
            ret += 10;
            vis[x] = 0;
            return ret += dfs(x);
        }
    }
    ret += 10;
    return ret;
}

void solve(){
    cin >> n;
    
    for (int i = 0; i<n; i += 2){
        cin >> s >> t;
        if (m[s] == 0){
            ++cnt;
            m[s] = cnt;
        }
        if (m[t] == 0){
            ++cnt;
            m[t] = cnt;
        }
        
        adj[m[s]].push_back(m[t]);
        adj[m[t]].push_back(m[s]);
        if (n - 2 == i){
            start = t;
        }
    }
    
    for (int i = 0; i<=cnt; ++i){
        dis[i] = -1;
        vis[i] = 0;
    }
    
    q.push(m[start]);
    dis[m[start]] = 0;
    
    while (q.size()){
        int cur = q.front();
        q.pop();
        
        for (int x : adj[cur]){
            if (vis[x] == 0){
                vis[x] = 1;
                dis[x] = dis[cur] + 10;
                q.push(x);
                continue;
            }
        }
    }
    
    for (int i = 0; i<=cnt; ++i){
        cout << dis[i] << '\n';
        ans = max(ans, dis[i]);
    }
    
    ans *= 2;
    
    for (int i = 0; i<=cnt; ++i){
        adj[i].clear();
    }
    cout << dfs(m[start]) - ans << '\n';
}

int main(){
    int t;
    cin >> t;
    
    while (t--){
        solve();
    }
}
